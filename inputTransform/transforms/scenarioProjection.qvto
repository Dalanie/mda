modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype IMD uses 'http://www.studieren.se/scenario_projection';

transformation scenarioProjection(in seq : UML, out scp : IMD);

main() {

	var interactions = seq.objectsOfType(Interaction);

	interactions.map mapInteraction();
}

mapping Interaction::mapInteraction() : Scenario {

	log('Scenario: ' + self.name);

	var someMSG = self.fragment[MessageOccurrenceSpecification];
	             
	             
	-- Für jede empfangene Nachricht gibt es einen solchen Eintrag.
	result.communication += someMSG.map mapCommunication();
}



mapping MessageOccurrenceSpecification::mapCommunication() : Communication 
    when {     self.message.receiveEvent = self
           and self.message.messageSort <> MessageSort::reply } {
	
	-- Setze den Empfänger.
	result.receiver := self.covered->asOrderedSet()->first().map mapreceiverOrsender();
	
	-- Setze den Absender.
	result.sender := self.message.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->first().map mapreceiverOrsender();
	
	-- Setze die Operation (= Nachricht), die empfangen wird.
	result.operation := self.message.map mapOperation();
	
	-- Ermittle die MessageOccurrences für den Rückgabewert (sollten 0 oder genau 1 sein).
    var results =
		seq.objectsOfType(ExecutionSpecification)
		    ->select(es | 
		            es.start = self
		        and es.finish.oclIsKindOf(MessageOccurrenceSpecification))
		    ->collect(be | 
		        be.finish.oclAsType(MessageOccurrenceSpecification))
		    ->select(mo |
		            mo.message.messageSort = MessageSort::reply
		        and not mo.message.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->intersection(self.covered)->isEmpty());
		        
	if (results->oclIsInvalid() or results->isEmpty()) {
		-- Rückgabetyp ist nur ein Void.
		result.returnValue := createVoid();
	} else {
		-- Wir haben eine Rückantwort.
		result.returnValue := results->asOrderedSet()->first().message.map mapreturnValue();
	};
	
	-- Pre-States sind die StateInvariants, deren erstes constrainedElement die empfangene
	-- Message ist.
	-- Pre-State muss auf der Lifeline des Empfängers liegen.
	var preStates = 
		seq.objectsOfType(StateInvariant)
		    ->select(si | 
		        not si.covered->intersection(self.covered)->isEmpty()
		        and si.ownedElement
		                ->asOrderedSet()->first().oclAsType(Constraint)
		                .constrainedElement->first() = self.message);
		           
	-- Post-States sind die State-Invariants, deren zweites constrainedElement die empfangene
	-- Message ist.
	-- Post-State muss auf der Lifeline es Empfängers liegen.     
	var postStates =
	    seq.objectsOfType(StateInvariant)
		    ->select(si | 
		       not  si.covered->intersection(self.covered)->isEmpty()
		       and  si.ownedElement
		                ->asOrderedSet()->first().oclAsType(Constraint)
		                .constrainedElement->last() = self.message);
		                
	var preStateName : String,
	    postStateName : String;               
		                
	if (not preStates->isEmpty()) {
		result.preState := preStates->asOrderedSet()->first().mapState();
		preStateName := result.preState.name;
	} else {
	    preStateName := '      -      ';
	};
	
	if (not postStates->isEmpty()) {
		result.postState := postStates->asOrderedSet()->first().mapState();
		postStateName := result.postState.name;
	} else {
		postStateName := '      -      ';
	};

	log (preStateName + ';' + 
	     result.sender.name   + ' ; ' +
	     result.operation.name + ' ; ' + 
	     result.receiver.name  + ' ; ' + 
	     result.returnValue.name    + ' ; ' + 
	     postStateName);
}

-- Mappe eine Lifeline als receiver oder sender Object.
mapping Lifeline::mapreceiverOrsender() : Object {
	result.name := self.name;
}

-- Mappe eine Nachricht auf eine Operation (= empfangene Nachricht).
mapping Message::mapOperation() : IMD::Operation {
	result.name := self.name;
}

-- Mappe eine Nachricht auf ein returnValue (= gesendete Nachricht).
mapping Message::mapreturnValue() : IMD::Return {
	result.name := self.name;
}

-- Erzeuge den Void-Type.
helper createVoid() : IMD::Return {
    -- Sicherstellen, dass er nur einmal angelegt wird.
	var existVoids = 
	    scp.objectsOfType(IMD::Return)
	        ->select(vo | vo.isVoid = true);

	if (not existVoids->isEmpty()) {
		return existVoids->asOrderedSet()->first();
	} else {
		return object IMD::Return {
		    name   := 'Void';
			isVoid := true;
		};
	};
	return null;
}

helper StateInvariant::mapState() : IMD::State {
    -- normales Mapping reicht nicht aus, da States mehrmals im Diagramm vorkommen könnten.
	var existStates =
	    scp.objectsOfType(IMD::State)
	        ->select(st | st.name = self.name);
	        
	if (not existStates->isEmpty()) {
		-- Bestehenden State benutzen.
		return existStates->asOrderedSet()->first();
	} else {
		-- State neu anlegen.
		return object IMD::State {
			name := self.name;
		};
	};
	return null;
}
