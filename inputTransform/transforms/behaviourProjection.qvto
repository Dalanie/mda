modeltype IMD uses 'http://www.studieren.se/scenario_projection';
modeltype BMO uses 'http://www.studieren.se/behaviour_projection';

transformation behaviourProjection(in scenario : IMD, out behaviour : BMO);

main() {
	var systemObjects = collectSystemObjects();
	//systemObjects->getProjectionForObject();
	
	systemObjects.map transform();
}

helper collectSystemObjects() : Set(Object){
	var objects = scenario.objectsOfType(Scenario)->asOrderedSet().communication->collect(sender);
	objects += scenario.objectsOfType(Scenario)->asOrderedSet().communication->collect(receiver);
	objects := objects->select(c | c <> null );
	objects := objects->select(c | c.name <> "user");
	return objects->asSet();
}

mapping Object::transform() : Behaviour {
	result.lifeline := object BMO::Object { name := self.name; };
	result.block += self.getProjectionForObject();
}


mapping OrderedSet(Communication)::transformCommunicationSet() : Block {
	// copy pre state of incomming message
	result.preState := object BMO::State { name := self->first().preState.name };
	// copy operation
	result.inMessage := object BMO::InMessage { operation := object BMO::Operation { name := self->first().operation.name } };
	var outMessages = self->asOrderedSet()->select(c | c <> self->first()).map transformCommunication();
	// copy the return value of the incoming message as result value of the whole activation
	result.activation := object BMO::Activation { returnValue := object BMO::Return { name := self->first().returnValue.name }; outMessage += outMessages };
	// copy post state of first incoming message
	result.postState := object BMO::State { name := self->first().postState.name };
}

mapping Communication::transformCommunication() : OutMessage {
	log('mapping communication ' + self.operation.name);
	// copy the operation name
	result.operation := object BMO::Operation { name := self.operation.name };
	// copy the receiver (TODO not quite sure if this is correct, so TODO in "transformCommunicationSet")
	result.outObject := object BMO::Object { name := self.receiver.name };
	// copy the return type
	result.returnValue := object BMO::Return { name := self.returnValue.name };
}

helper Object::getProjectionForObject() : Sequence(Block) {
	log('Projection for Object ' + self.name);
	// get all communications where self is either sender or receiver
	var projectionSet = scenario.objectsOfType(Scenario)->asOrderedSet().communication->select(c | c.sender = self or c.receiver = self);
	// split the communication set into subsets that until the next receving message (exclusive)
	var splittedProjections = projectionSet->asOrderedSet()->splitOnIncomingMessages(self);
	splittedProjections.printOrderedSet('  ');
	
	return splittedProjections.map transformCommunicationSet();
}

helper OrderedSet(Communication)::splitOnIncomingMessages(in o : Object) : OrderedSet(OrderedSet(Communication)) {
	if(self->isEmpty()) return null;
	
	// get all incoming messages
	var incomingMessage := self->select(c | c.receiver = o);
	// get the first incoming message
	var firstIncommingMessage := incomingMessage->first();
	// get the offset of the first incoming message
	var offset := self->indexOf(firstIncommingMessage);
	// make sure we actually cut something off
	if(offset = 1){
		if(incomingMessage->size() = 1){
			// the first message was incoming, everything after that is outgoing, so there is only this one block
			offset := self->size() + 1;
		} else {
			// cut of the first part, and continue with the one after (including) the second incoming message
			offset := self->indexOf(incomingMessage->at(2));
		}
	};
	// get all the elements before (exclusive) the incoming message
	var firstSubset = self->subOrderedSet(1, offset - 1);
	// create a new Set of Sets
	var resultSet := OrderedSet{firstSubset};

	// get the remaining elements
	if(offset <= self->size()){
		var rest = self->subOrderedSet(offset, self->size());
		var recResult = rest->splitOnIncomingMessages(o);
		// add all recursively splitted groups
		recResult->forEach(communicationset) {
			resultSet := resultSet->append(communicationset);
		};
	};
	return resultSet;
}

// debugging
helper Object::printObject() {
	log('Object ' + self.name);	
}

helper Communication::printCommunication(in tabs : String) {
	log(tabs + 'Communication ' + self.operation.name + ' from ' + self.sender.name + ' to ' + self.receiver.name);
}

helper OrderedSet(Communication)::printOrderedSet(in tabs : String) {
	log(tabs + ' next Set');
	self->printCommunication(tabs + ' ');
	log('');
}