modeltype BMO uses 'http://www.studieren.se/behaviour_projection';
modeltype IOM uses 'http://www.studieren.se/automaton_projection';

transformation automatonProjection(in bmo : BMO, out iom : IOM);

property inputsAlreadyInserted : Set(String);
property outputsAlreadyInserted : Set(IOAutomaton::Activation);

	
main() {
	mergeLifelineBehaviours(bmo.objectsOfType(Behaviour))-> map mapBehaviour();
}

helper mergeLifelineBehaviours(inBehaviours : Set(Behaviour)) : Set(Behaviour){
	var outBehaviours : Set(Behaviour);
	
	inBehaviours->forEach(behaviour) {
		var existentBehaviour : Behaviour = findBehaviourOfLifeline(outBehaviours, behaviour.lifeline.name);
		
		if(existentBehaviour = null) {
			// Behaviour doesn't exist yet; add
			outBehaviours += behaviour;
		} else {
			// Behaviour already exists; merge
			behaviour.block->forEach(block) {
				existentBehaviour.block += block;
			}
		}
	};
	
	return outBehaviours;
}

helper findBehaviourOfLifeline(behaviours : Set(Behaviour), lifelinename : String) : Behaviour {
	behaviours->forEach(behaviour) {
		if(behaviour.lifeline.name.=(lifelinename)) {
			return behaviour;
		}
	};
	
	return null;
}

helper getStatesOfBehaviour(behaviour : Behaviour) : Set(IOAutomaton::State) {
	var states : Set(IOAutomaton::State);
	behaviour.block->forEach(block) {
		if(not containsStateWithname(states, block.preState.name)) {
			states += block.preState-> map mapState();
		};
		if(not containsStateWithname(states, block.postState.name)) {
			states += block.postState-> map mapState();
		};
	};
	
	return states;
}

helper containsStateWithname(states : Set(IOAutomaton::State), statename : String) : Boolean {
	states->forEach(state) {
		if(state.name.=(statename)) {
			return true;
		}
	};
	
	return false;
}

helper containsInput(inputs : Set(IOAutomaton::Input), probeInput : IOAutomaton::Input) : Boolean {
	inputs->forEach(input) {
		if(input.operation.name = (probeInput.operation.name)) {
			return true;
		}
	};
	
	return false;
}

helper getInputsFromTransitions(transitions : Set(IOAutomaton::Transition)) : Set(IOAutomaton::Input) {
	var inputs : Set(IOAutomaton::Input);
	transitions->forEach(transition) {
		if(not containsInput(inputs, transition.input)) {
			inputs += transition.input;
		}
	};
	return inputs;
}

helper containsOutput(outputs : Set(IOAutomaton::Output), probeOutput : IOAutomaton::Output) : Boolean {
	outputs->forEach(output) {
		if(output.operation.name.=(probeOutput.operation.name)) {
			return true;
		}
	};
	
	return false;
}

helper getAutomatonState(states : Set(IOAutomaton::State), inputState : BehaviourProjection::State) : IOAutomaton::State {
	states->forEach(state) {
		if(state.name.=(inputState.name)) {
			return state;
		}
	};
	
	return null;
}

helper IOAutomaton::Activation::equalsBehaviourActivation(activation : BehaviourProjection::Activation) : Boolean {
	return self.returnValue.name = activation.returnValue.name 
		and self.returnValue.isVoid = activation.returnValue.isVoid 
		and self.output->forAll(o1 | activation.outMessage->exists(o2 | o1.name = o2.operation.name 
			and o1.operation.name = o2.operation.name 
			and o1.outObject.name =    o2.outObject.name 
			and ((o1.returnValue = null and o2.returnValue = null) or 
				(o1.returnValue.name =    o2.returnValue.name and o1.returnValue.isVoid =  o2.returnValue.isVoid))))
		and activation.outMessage->forAll(o1 | self.output->exists(o2 | o2.name = o1.operation.name 
			and o2.operation.name = o1.operation.name 
			and o2.outObject.name =    o1.outObject.name 
			and ((o2.returnValue = null and o1.returnValue = null) or 
				(o2.returnValue.name =    o1.returnValue.name and o2.returnValue.isVoid =  o1.returnValue.isVoid))));
}

mapping BehaviourProjection::State::mapState() : IOAutomaton::State {
	result.name := self.name;
}


mapping Behaviour::mapBehaviour() : Automaton {
	log("Mapping Behaviour to Automaton " + self.lifeline.name);
	
	result.name := self.lifeline.name;
	
	result.z := getStatesOfBehaviour(self);
	result.ingoing := self.block.inMessage.map mapInMessage();
	result.outcoming := self.block.activation.map mapActivation();
	result.delta := self.block->map mapBlock(result);
	result.z0 := self.block->at(1).preState.map mapState();
}

mapping Block::mapBlock(automaton : IOAutomaton::Automaton) : Transition {
	result.preState := getAutomatonState(automaton.z, self.preState);
	result.postState := getAutomatonState(automaton.z, self.postState);
	result.input := automaton.ingoing->select(e | e.operation.name = self.inMessage.operation.name)->asSequence()->at(1);
	result.activation := automaton.outcoming->select(e | e.equalsBehaviourActivation(self.activation))->asSequence()->at(1);
	result.name := result.input.name + " / " + result.activation.name;
}

mapping BehaviourProjection::InMessage::mapInMessage() : IOAutomaton::Input

when { not inputsAlreadyInserted->includes(self.operation.name) 
}{
	inputsAlreadyInserted := inputsAlreadyInserted->including(self.operation.name);
	result.operation := self.operation.map mapOperation();
	result.name := result.operation.name;
}

mapping BehaviourProjection::Operation::mapOperation() : IOAutomaton::Operation {
	result.name := self.name;
}

mapping BehaviourProjection::Activation::mapActivation() : IOAutomaton::Activation

when { not outputsAlreadyInserted->exists(e | e.equalsBehaviourActivation(self))
}{
	var name : String;
	result.output := self.outMessage->map mapOutMessage();
	result.output->forEach(outp) {
		name := name + outp.name + ",";
	};
	result.returnValue := self.returnValue.map mapReturn();
	name := name + result.returnValue.name;
	result.name := name;
	outputsAlreadyInserted += result;
}

mapping BehaviourProjection::OutMessage::mapOutMessage() : IOAutomaton::Output {
	result.operation := self.operation.map mapOperation();
	result.outObject := self.outObject.map mapObject();
	result.returnValue := self.returnValue.map mapReturn();
	result.name := "<" + result.operation.name + "," + result.outObject.name + "," + "TODO" + ">";
}
mapping BehaviourProjection::Object::mapObject() : IOAutomaton::Object {
	result.name := self.name;	
}
mapping BehaviourProjection::Return::mapReturn() : IOAutomaton::ReturnValue {
	result.name := self.name;
	result.isVoid := self.isVoid;
}
